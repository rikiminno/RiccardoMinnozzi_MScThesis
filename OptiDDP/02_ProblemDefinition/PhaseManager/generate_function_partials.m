function JacFileName = generate_function_partials(functionFile, vod, type, nx, nu, nw, nl, nxp, nwp)
% generates the partial of the specified function with respect to the
% specified variables
%
% authored by Riccardo Minnozzi, 06/2024

% define the adigator derivative input structures
[t, X, I, w, sigma] = getVodStructures(vod, nx, nu, nw, nl, nxp, nwp);
k = adigatorCreateAuxInput([1, 1]);

% perform the differentiation and rename the resulting file according to
% the vod
type = char(type);
switch type
    case 'augmented_lagrangian'
        inputs = {I, sigma};
    case 'augmented_state_derivative'
        inputs = {t, X};
    case 'path_constraint'
        inputs = {t, X};
    case 'initial_condition'
        inputs = {w};
    case 'running_cost'
        inputs = {t, X};
    case 'constraints'
        inputs = {I};
    case 'stage_collocation'
        inputs = {k, X};
end

functionFile = char(functionFile);

% set the Jacobian file name to include the vod name after the underscore
isPreviousJacobian = checkIfIsPreviousJacobian(functionFile);
if isPreviousJacobian
    JacFileName = strcat(functionFile, vod);
else
    JacFileName = strcat(functionFile, "_",  vod);
end
JacFileName = char(JacFileName);

% generate the Jacobian
adigatorGenJacFile(functionFile, inputs, JacFileName);

end

function [t, X, I, w, sigma] = getVodStructures(vod, nx, nu, nw, nl, nxp, nwp)
% function that outputs the adigator-required derivation structures for
% derivative definition

nX = nx + nu + nw;
nI = nx + nw + nxp + nwp + nl;

I = adigatorCreateAuxInput([nI, 1]);
X = adigatorCreateAuxInput([nX, 1]);
t = adigatorCreateAuxInput([1, 1]);
w = adigatorCreateAuxInput([nw, 1]);
sigma = adigatorCreateAuxInput([1, 1]);
switch vod
    case 'I'
        I = adigatorCreateDerivInput([nI, 1], vod);
    case 'X'
        X = adigatorCreateDerivInput([nX, 1], vod);
    case 't'
        t = adigatorCreateDerivInput([1, 1], vod);
    case 'w'
        w = adigatorCreateDerivInput([nw, 1], vod);
    otherwise
        error("The variable of differentiation (vod) is not among the supported variable names.")
end
end

function isPreviousJacobian = checkIfIsPreviousJacobian(functionFile)
% function to check if the provided function file is already an
% adigator-generated Jacobian

% open the function file and get the third line
lines = readlines(strcat(functionFile, ".m"));
lines = lines(3);

isPreviousJacobian = 0;
if strcmp(lines, '% Jacobian wrapper file generated by ADiGator')
    isPreviousJacobian = 1;
end

end