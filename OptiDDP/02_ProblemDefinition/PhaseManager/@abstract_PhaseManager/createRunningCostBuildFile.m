function obj = createRunningCostBuildFile(obj)
% function that creates the running cost wrapper function file

% get the phase number and the inputs dimensions
i = obj.ID(2);
[nx, nu, nw, ~, ~, ~] = obj.getInputSizes();
nX = nx + nu + nw;

% create the running cost wrapper file
obj.L_file = strcat("L_", string(i));
id = fopen(strcat(obj.L_file, ".m"), "w+");
fprintf(id, strcat("function L = ", obj.L_file, ...
    "(t, X) \n"));
commentStr = strcat("%% Running cost wrapper function for phase ", ...
    string(i), ",\n%% automatically generated by the PhaseManager class on ", ...
    datestr(datetime("now")), "\n");
fprintf(id, commentStr);
% add line to increase corresponding feval count
fprintf(id, "%% Increase running cost function evaluations \n");
fprintf(id, "global HOIST_fevalsCount_L \n");
fprintf(id, "HOIST_fevalsCount_L = HOIST_fevalsCount_L + 1; \n");
% set the wrapped inputs
fprintf(id, strcat("x = X(1: ", string(nx), ", 1); \n"));
fprintf(id, strcat("u = X(", string(nx + 1), ": ", ...
    string(nx + nu), ", 1); \n"));
fprintf(id, strcat("w = X(", string(nx + nu + 1), ": ", ...
    string(nX), ", 1); \n"));
% set the output
fprintf(id, "\n");
fprintf(id, strcat("L = ", obj.runningCostFile, "(t, x, u, w); \n"));
fprintf(id, "end");
fclose(id);
end

