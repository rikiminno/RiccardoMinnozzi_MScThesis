% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function Psi = Psi_1_I_ADiGatorJac(I)
global ADiGator_Psi_1_I_ADiGatorJac
if isempty(ADiGator_Psi_1_I_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_Psi_1_I_ADiGatorJac.Psi_1_I_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Constraints wrapper function for phase 1,
%User Line: % automatically generated by the PhaseManager_Psi class on 06-Dec-2024 12:49:23
xm.dI = I.dI(Gator1Data.Index2);
xm.f = I.f(Gator1Data.Index1,1);
%User Line: xm = I(1: 4, 1);
wm.dI = I.dI(5);
wm.f = I.f(5,1);
%User Line: wm = I(5: 5, 1);
xp.dI = I.dI(6);
xp.f = I.f(6,1);
%User Line: xp = I(6: 6, 1);
wp.dI = I.dI(7);
wp.f = I.f(7,1);
%User Line: wp = I(7: 7, 1);
lm.dI = I.dI(Gator1Data.Index4);
lm.f = I.f(Gator1Data.Index3,1);
%User Line: lm = I(8: 9, 1);
cadainput2_1.dI = xm.dI; cadainput2_1.f = xm.f;
%User Line: cadainput2_1 = xm;
cadainput2_2.dI = wm.dI; cadainput2_2.f = wm.f;
%User Line: cadainput2_2 = wm;
cadainput2_3.dI = xp.dI; cadainput2_3.f = xp.f;
%User Line: cadainput2_3 = xp;
cadainput2_4.dI = wp.dI; cadainput2_4.f = wp.f;
%User Line: cadainput2_4 = wp;
cadaoutput2_1 = ADiGator_terminal_constraint_11(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4);
% Call to function: terminal_constraint_1
Psi.dI = cadaoutput2_1.dI; Psi.f = cadaoutput2_1.f;
%User Line: Psi = cadaoutput2_1;
Psi.dI_size = [2,9];
Psi.dI_location = Gator1Data.Index5;
end
function Psi = ADiGator_terminal_constraint_11(xm,wm,xp,wp)
global ADiGator_Psi_1_I_ADiGatorJac
Gator1Data = ADiGator_Psi_1_I_ADiGatorJac.ADiGator_terminal_constraint_11.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that implements the terminal constraints for the current phase
global auxdata 
%User Line: global
Psi.f =  zeros(2, 1);
%User Line: Psi = zeros(2, 1);
cada1f1dI = xm.dI(3);
cada1f1 = xm.f(3);
Psi.dI = cada1f1dI;
Psi.f(1,1) = cada1f1;
%User Line: Psi(1, 1) = xm(3);
cada1f1dI = xm.dI(4);
cada1f1 = xm.f(4);
cada1f2dI = xm.dI(1);
cada1f2 = xm.f(1);
cada1f3dI = (1/2)./sqrt(cada1f2).*cada1f2dI;
cada1f3dI(cada1f2 == 0 & cada1f2dI == 0) = 0;
cada1f3 = sqrt(cada1f2);
cada1f4dI = -1./cada1f3.^2.*cada1f3dI;
cada1f4 = 1/cada1f3;
cada1td1 = zeros(2,1);
cada1td1(2) = cada1f1dI;
cada1td1(1) = cada1td1(1) + -cada1f4dI;
cada1f5dI = cada1td1;
cada1f5 = cada1f1 - cada1f4;
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index1) = cada1f5dI;
cada1td1(2) = Psi.dI(1);
Psi.dI = cada1td1;
Psi.f(2,1) = cada1f5;
%User Line: Psi(2, 1) = xm(4) - 1/sqrt(xm(1));
end


function ADiGator_LoadData()
global ADiGator_Psi_1_I_ADiGatorJac
ADiGator_Psi_1_I_ADiGatorJac = load('Psi_1_I_ADiGatorJac.mat');
return
end