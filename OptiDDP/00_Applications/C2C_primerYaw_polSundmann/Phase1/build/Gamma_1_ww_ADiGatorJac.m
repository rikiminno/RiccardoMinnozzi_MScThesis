% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function x0_w = Gamma_1_ww_ADiGatorJac(w)
global ADiGator_Gamma_1_ww_ADiGatorJac
if isempty(ADiGator_Gamma_1_ww_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_Gamma_1_ww_ADiGatorJac.Gamma_1_ww_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
gator_w.f.dw = w.dw; gator_w.f.f = w.f;
%User Line: gator_w.f = w;
gator_w.dw.f = 1;
%User Line: gator_w.dw = ones(1,1);
cadainput2_1 = gator_w;
cadainput2_1.dw = gator_w.dw.f;
cadainput2_1.f = gator_w.f.f;
%User Line: cadainput2_1 = gator_w;
cadaoutput2_1 = Gamma_1_w_ADiGatorJac(cadainput2_1);
% Call to function: Gamma_1_w_ADiGatorJac
x0 = cadaoutput2_1;
%User Line: x0 = cadaoutput2_1;
x0.dw.f = 0;
%User Line: x0.dw = zeros(1,1);
x0_w.f =  zeros(4,1);
%User Line: x0_w = zeros(4,1);
end
function x0 = Gamma_1_w_ADiGatorJac(w)
global ADiGator_Gamma_1_ww_ADiGatorJac
Gator1Data = ADiGator_Gamma_1_ww_ADiGatorJac.Gamma_1_w_ADiGatorJac.Gator1Data;
Gator2Data = ADiGator_Gamma_1_ww_ADiGatorJac.Gamma_1_w_ADiGatorJac.Gator2Data;
% ADiGator Start Derivative Computations
%User Line: % Initial condition wrapper function for phase 1,
%User Line: % automatically generated by the PhaseManager class on 06-Dec-2024 12:49:23
cadainput2_1.dw = w.dw;
% Deriv 1 Line: cadainput2_1.dw = w.dw;
cadainput2_1.f = w.f;
% Deriv 1 Line: cadainput2_1.f = w.f;
%User Line: cadainput2_1 = w;
cadainput3_1 = cadainput2_1;
% Deriv 1 Line: cadainput3_1 = cadainput2_1;
cadaoutput3_1 = ADiGator_initial_condition_11(cadainput3_1);
% Call to function: ADiGator_initial_condition_11
cadaoutput2_1 = cadaoutput3_1;
% Deriv 1 Line: cadaoutput2_1 = cadaoutput3_1;
% Call to function: initial_condition_1
x0.f = cadaoutput2_1.f;
% Deriv 1 Line: x0.f = cadaoutput2_1.f;
%User Line: x0 = cadaoutput2_1;
end
function x0 = ADiGator_initial_condition_11(w)
global ADiGator_Gamma_1_ww_ADiGatorJac
Gator1Data = ADiGator_Gamma_1_ww_ADiGatorJac.ADiGator_initial_condition_11.Gator1Data;
Gator2Data = ADiGator_Gamma_1_ww_ADiGatorJac.ADiGator_initial_condition_11.Gator2Data;
% ADiGator Start Derivative Computations
%User Line: % function that copmutes the initial conditions for the current phase
global auxdata 
% Deriv 1 Line: global
%User Line: global
x0.f = [0;0;0;0];
% Deriv 1 Line: x0.f =  zeros(4, 1);
%User Line: x0 = zeros(4, 1);
x0.f(1) = auxdata.r0bar;
% Deriv 1 Line: x0.f(1) = auxdata.r0bar;
%User Line: x0(1) = auxdata.r0bar;
x0.f(2) = auxdata.t0bar;
% Deriv 1 Line: x0.f(2) = auxdata.t0bar;
%User Line: x0(2) = auxdata.t0bar;
x0.f(3) = auxdata.u0bar;
% Deriv 1 Line: x0.f(3) = auxdata.u0bar;
%User Line: x0(3) = auxdata.u0bar;
x0.f(4) = auxdata.v0bar;
% Deriv 1 Line: x0.f(4) = auxdata.v0bar;
%User Line: x0(4) = auxdata.v0bar;
end


function ADiGator_LoadData()
global ADiGator_Gamma_1_ww_ADiGatorJac
ADiGator_Gamma_1_ww_ADiGatorJac = load('Gamma_1_ww_ADiGatorJac.mat');
return
end