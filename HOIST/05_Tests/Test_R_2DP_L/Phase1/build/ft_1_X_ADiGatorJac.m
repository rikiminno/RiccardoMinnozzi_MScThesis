% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function Xdot = ft_1_X_ADiGatorJac(t,X)
global ADiGator_ft_1_X_ADiGatorJac
if isempty(ADiGator_ft_1_X_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_ft_1_X_ADiGatorJac.ft_1_X_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Augmented state derivative wrapper function for phase 1,
%User Line: % automatically generated by the PhaseManager class on 17-Jul-2024 15:45:44
x.dX = X.dX(Gator1Data.Index2);
x.f = X.f(Gator1Data.Index1,1);
%User Line: x = X(1: 4, 1);
u.dX = X.dX(5);
u.f = X.f(5,1);
%User Line: u = X(5: 5, 1);
w.dX = X.dX(6);
w.f = X.f(6,1);
%User Line: w = X(6: 6, 1);
cadainput2_1 = t;
%User Line: cadainput2_1 = t;
cadainput2_2.dX = x.dX; cadainput2_2.f = x.f;
%User Line: cadainput2_2 = x;
cadainput2_3.dX = u.dX; cadainput2_3.f = u.f;
%User Line: cadainput2_3 = u;
cadainput2_4.dX = w.dX; cadainput2_4.f = w.f;
%User Line: cadainput2_4 = w;
cadaoutput2_1 = ADiGator_state_derivative_11(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4);
% Call to function: state_derivative_1
xdot.dX = cadaoutput2_1.dX; xdot.f = cadaoutput2_1.f;
%User Line: xdot = cadaoutput2_1;
udot.f =  zeros(1, 1);
%User Line: udot = zeros(1, 1);
wdot.f =  zeros(1, 1);
%User Line: wdot = zeros(1, 1);
cada1td1 = zeros(10,1);
cada1td1(Gator1Data.Index3) = xdot.dX;
Xdot.dX = cada1td1;
Xdot.f = [xdot.f;udot.f;wdot.f];
%User Line: Xdot = [xdot; udot; wdot];
Xdot.dX_size = [6,6];
Xdot.dX_location = Gator1Data.Index4;
end
function xdot = ADiGator_state_derivative_11(t,x,u,w)
global ADiGator_ft_1_X_ADiGatorJac
Gator1Data = ADiGator_ft_1_X_ADiGatorJac.ADiGator_state_derivative_11.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that computes the state derivative
global auxdata 
%User Line: global
%User Line: % assemble state
rbar.dX = x.dX(1);
rbar.f = x.f(1);
%User Line: rbar = x(1);
thetabar.dX = x.dX(2);
thetabar.f = x.f(2);
%User Line: thetabar = x(2);
ubar.dX = x.dX(3);
ubar.f = x.f(3);
%User Line: ubar = x(3);
vbar.dX = x.dX(4);
vbar.f = x.f(4);
%User Line: vbar = x(4);
%User Line: % the primer vector is always aligned with the velocity
yaw.dX = u.dX; yaw.f = u.f;
%User Line: yaw = u;
alpha.f =  atan(1/sqrt(2));
%User Line: alpha = atan(1/sqrt(2));
%User Line: % Solar-sail acceleration in local frame
a_RSW.f =  zeros(3, 1);
%User Line: a_RSW = zeros(3, 1);
cada1f1 = cos(alpha.f);
cada1f2 = cada1f1^2;
cada1f3 = auxdata.a0bar*cada1f2;
cada1f4 = sin(alpha.f);
cada1f5 = cada1f3*cada1f4;
cada1f6dX = cos(yaw.f).*yaw.dX;
cada1f6 = sin(yaw.f);
cada1f7dX = cada1f5.*cada1f6dX;
cada1f7 = cada1f5*cada1f6;
a_RSW.dX = cada1f7dX;
a_RSW.f(1) = cada1f7;
%User Line: a_RSW(1) = auxdata.a0bar*cos(alpha).^2.*sin(alpha).*sin(yaw);
cada1f1 = cos(alpha.f);
cada1f2 = cada1f1^2;
cada1f3 = auxdata.a0bar*cada1f2;
cada1f4 = sin(alpha.f);
cada1f5 = cada1f3*cada1f4;
cada1f6dX = -sin(yaw.f).*yaw.dX;
cada1f6 = cos(yaw.f);
cada1f7dX = cada1f5.*cada1f6dX;
cada1f7 = cada1f5*cada1f6;
cada1td1 = zeros(2,1);
cada1td1(2) = cada1f7dX;
cada1td1(1) = a_RSW.dX(1);
a_RSW.dX = cada1td1;
a_RSW.f(2) = cada1f7;
%User Line: a_RSW(2) = auxdata.a0bar*cos(alpha).^2.*sin(alpha).*cos(yaw);
%User Line: % assemble EOMs
drbar.dX = auxdata.eta.*ubar.dX;
drbar.f = ubar.f*auxdata.eta;
%User Line: drbar = ubar*auxdata.eta;
cada1td1 = zeros(2,1);
cada1td1(2) = vbar.dX./rbar.f;
cada1td1(1) = cada1td1(1) + -vbar.f./rbar.f.^2.*rbar.dX;
cada1f1dX = cada1td1;
cada1f1 = vbar.f/rbar.f;
dtheta.dX = auxdata.eta.*cada1f1dX;
dtheta.f = cada1f1*auxdata.eta;
%User Line: dtheta = vbar./rbar*auxdata.eta;
cada1f1dX = 2.*vbar.f.^(2-1).*vbar.dX;
cada1f1 = vbar.f^2;
cada1td1 = zeros(2,1);
cada1td1(2) = cada1f1dX./rbar.f;
cada1td1(1) = cada1td1(1) + -cada1f1./rbar.f.^2.*rbar.dX;
cada1f2dX = cada1td1;
cada1f2 = cada1f1/rbar.f;
cada1f3dX = 2.*rbar.f.^(2-1).*rbar.dX;
cada1f3 = rbar.f^2;
cada1f4dX = -1./cada1f3.^2.*cada1f3dX;
cada1f4 = 1/cada1f3;
cada1td1 = cada1f2dX;
cada1td1(1) = cada1td1(1) + -cada1f4dX;
cada1f5dX = cada1td1;
cada1f5 = cada1f2 - cada1f4;
cada1f6dX = auxdata.eta.*cada1f5dX;
cada1f6 = cada1f5*auxdata.eta;
cada1f7dX = a_RSW.dX(1);
cada1f7 = a_RSW.f(1);
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index1) = cada1f6dX;
cada1td1(3) = cada1td1(3) + cada1f7dX;
dubar.dX = cada1td1;
dubar.f = cada1f6 + cada1f7;
%User Line: dubar = (vbar.^2./rbar - 1./rbar.^2)*auxdata.eta + a_RSW(1);
cada1f1dX = -ubar.dX;
cada1f1 = uminus(ubar.f);
cada1td1 = zeros(2,1);
cada1td1(1) = vbar.f.*cada1f1dX;
cada1td1(2) = cada1td1(2) + cada1f1.*vbar.dX;
cada1f2dX = cada1td1;
cada1f2 = cada1f1*vbar.f;
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index2) = cada1f2dX./rbar.f;
cada1td1(1) = cada1td1(1) + -cada1f2./rbar.f.^2.*rbar.dX;
cada1f3dX = cada1td1;
cada1f3 = cada1f2/rbar.f;
cada1f4dX = auxdata.eta.*cada1f3dX;
cada1f4 = cada1f3*auxdata.eta;
cada1f5dX = a_RSW.dX(2);
cada1f5 = a_RSW.f(2);
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index3) = cada1f4dX;
cada1td1(4) = cada1td1(4) + cada1f5dX;
dvbar.dX = cada1td1;
dvbar.f = cada1f4 + cada1f5;
%User Line: dvbar = -ubar*vbar./rbar*auxdata.eta             + a_RSW(2);
cada1td1 = zeros(10,1);
cada1td1(4) = drbar.dX;
cada1td1(Gator1Data.Index4) = dtheta.dX;
cada1td1(Gator1Data.Index5) = dubar.dX;
cada1td1(Gator1Data.Index6) = dvbar.dX;
xdot.dX = cada1td1;
xdot.f = [drbar.f;dtheta.f;dubar.f;dvbar.f];
%User Line: xdot = [drbar; dtheta; dubar; dvbar];
end


function ADiGator_LoadData()
global ADiGator_ft_1_X_ADiGatorJac
ADiGator_ft_1_X_ADiGatorJac = load('ft_1_X_ADiGatorJac.mat');
return
end