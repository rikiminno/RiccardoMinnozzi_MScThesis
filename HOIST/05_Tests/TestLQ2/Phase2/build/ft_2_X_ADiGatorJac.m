% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function Xdot = ft_2_X_ADiGatorJac(t,X)
global ADiGator_ft_2_X_ADiGatorJac
if isempty(ADiGator_ft_2_X_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_ft_2_X_ADiGatorJac.ft_2_X_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Augmented state derivative wrapper function for phase 2,
%User Line: % automatically generated by the PhaseManager class on 12-Jul-2024 15:11:14
x.dX = X.dX(Gator1Data.Index2);
x.f = X.f(Gator1Data.Index1,1);
%User Line: x = X(1: 6, 1);
u.dX = X.dX(Gator1Data.Index4);
u.f = X.f(Gator1Data.Index3,1);
%User Line: u = X(7: 9, 1);
w.dX = X.dX(Gator1Data.Index6);
w.f = X.f(Gator1Data.Index5,1);
%User Line: w = X(10: 15, 1);
cadainput2_1 = t;
%User Line: cadainput2_1 = t;
cadainput2_2.dX = x.dX; cadainput2_2.f = x.f;
%User Line: cadainput2_2 = x;
cadainput2_3.dX = u.dX; cadainput2_3.f = u.f;
%User Line: cadainput2_3 = u;
cadainput2_4.dX = w.dX; cadainput2_4.f = w.f;
%User Line: cadainput2_4 = w;
cadaoutput2_1 = ADiGator_state_derivative_21(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4);
% Call to function: state_derivative_2
xdot.dX = cadaoutput2_1.dX; xdot.f = cadaoutput2_1.f;
%User Line: xdot = cadaoutput2_1;
udot.f =  zeros(3, 1);
%User Line: udot = zeros(3, 1);
wdot.f =  zeros(6, 1);
%User Line: wdot = zeros(6, 1);
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index7) = xdot.dX;
Xdot.dX = cada1td1;
Xdot.f = [xdot.f;udot.f;wdot.f];
%User Line: Xdot = [xdot; udot; wdot];
Xdot.dX_size = [15,15];
Xdot.dX_location = Gator1Data.Index8;
end
function xdot = ADiGator_state_derivative_21(t,x,u,w)
global ADiGator_ft_2_X_ADiGatorJac
Gator1Data = ADiGator_ft_2_X_ADiGatorJac.ADiGator_state_derivative_21.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that computes the state derivative for the linear
%User Line: % quadratic test problem
xdot.f =  zeros(6, 1);
%User Line: xdot = zeros(6, 1);
cada1f1dX = x.dX(Gator1Data.Index2);
cada1f1 = x.f(Gator1Data.Index1);
xdot.dX = cada1f1dX;
xdot.f(Gator1Data.Index3) = cada1f1;
%User Line: xdot(1:3) = x(4: 6);
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index5) = u.dX;
cada1td1(Gator1Data.Index6) = xdot.dX(Gator1Data.Index7);
xdot.dX = cada1td1;
xdot.f(Gator1Data.Index4) = u.f;
%User Line: xdot(4:6) = u;
end


function ADiGator_LoadData()
global ADiGator_ft_2_X_ADiGatorJac
ADiGator_ft_2_X_ADiGatorJac = load('ft_2_X_ADiGatorJac.mat');
return
end