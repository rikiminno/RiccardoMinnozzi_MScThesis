% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function x0 = Gamma_1_w_ADiGatorJac(w)
global ADiGator_Gamma_1_w_ADiGatorJac
if isempty(ADiGator_Gamma_1_w_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_Gamma_1_w_ADiGatorJac.Gamma_1_w_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Initial condition wrapper function for phase 1,
%User Line: % automatically generated by the PhaseManager class on 12-Jul-2024 15:10:19
cadainput2_1.dw = w.dw; cadainput2_1.f = w.f;
%User Line: cadainput2_1 = w;
cadaoutput2_1 = ADiGator_initial_condition_11(cadainput2_1);
% Call to function: initial_condition_1
x0.f = cadaoutput2_1.f;
%User Line: x0 = cadaoutput2_1;
end
function x0 = ADiGator_initial_condition_11(w)
global ADiGator_Gamma_1_w_ADiGatorJac
Gator1Data = ADiGator_Gamma_1_w_ADiGatorJac.ADiGator_initial_condition_11.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that copmutes the initial conditions for the current phase
x0.f =  ones(6, 1);
%User Line: x0 = ones(6, 1);
end


function ADiGator_LoadData()
global ADiGator_Gamma_1_w_ADiGatorJac
ADiGator_Gamma_1_w_ADiGatorJac = load('Gamma_1_w_ADiGatorJac.mat');
return
end