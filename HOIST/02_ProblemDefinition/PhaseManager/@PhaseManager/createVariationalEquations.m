function obj = createVariationalEquations(obj)
% function that automatically generates the variational
% equations wrapper file

% get the phase number and the inputs dimensions
i = obj.ID(2);
[nx, nu, nw, ~, ~, ~] = obj.getInputSizes();
nX = nx + nu + nw;

% create the variational equations wrapper file
obj.varEq_file = strcat("varEq_", string(i));
id = fopen(strcat(obj.varEq_file, ".m"), "w+");
fprintf(id, strcat("function PhiDot = ", obj.varEq_file, ...
    "(t, Phi) \n"));
commentStr = strcat("%% Variational equations wrapper function for phase ", ...
    string(i), ",\n%% automatically generated by the PhaseManager class on ", ...
    datestr(datetime("now")), "\n");
fprintf(id, commentStr);
% set the wrapped inputs
fprintf(id, strcat("X = Phi(1: ", string(nX), "); \n"));
fprintf(id, strcat("STM = Phi(", string(nX + 1), ": ", string(nX + nX^2), "); \n"));
fprintf(id, strcat("STT = Phi(", string(nX + nX^2 + 1), ": end); \n"));
fprintf(id, strcat("STM = reshape(STM, ", string(nX), ", ", string(nX), "); \n"));
fprintf(id, strcat("STT = reshape(STT, ", string(nX), ", ", string(nX), ", ", ...
    string(nX), "); \n"));
fprintf(id, strcat("Xdot = ", obj.ft_file, "(t, X); \n"));
fprintf(id, strcat("ft_X = ", obj.ft_X_file, "(t, X); \n"));
fprintf(id, strcat("ft_XX = ", obj.ft_XX_file, "(t, X); \n"));
fprintf(id, strcat("STMdot = ft_X * STM; \n"));
fprintf(id, strcat("STTdot = tensorMatrixMultiply(permute(ft_XX, [2 1 3]), STM);\n"));
fprintf(id, strcat("STTdot = tensorMatrixMultiply(permute(STTdot, [3 2 1]), STM);\n"));
fprintf(id, strcat("STTdot = STTdot + tensorMatrixMultiply(STT, ft_X');\n"));
fprintf(id, strcat("STMdot = reshape(STMdot, ", string(nX^2), ", 1); \n"));
fprintf(id, strcat("STTdot = reshape(STTdot, ", string(nX^3), ", 1); \n"));
fprintf(id, strcat("PhiDot = [Xdot; STMdot; STTdot]; \n"));
fprintf(id, "end");
end