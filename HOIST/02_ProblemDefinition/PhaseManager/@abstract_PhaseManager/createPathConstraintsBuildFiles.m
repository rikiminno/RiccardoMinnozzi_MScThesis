function obj = createPathConstraintsBuildFiles(obj)
% function that creates the build files for the equality and inequality
% path constraints

% get the phase number and the inputs dimensions
i = obj.ID(2);
[nx, nu, nw, ~, ~, ~] = getInputSizes(obj);
nX = nx + nu + nw;

% create the equality path constraints wrapper file
obj.cEq_file = strcat("cEq_", string(i));
id = fopen(strcat(obj.cEq_file, ".m"), "w+");
fprintf(id, strcat("function cEq = ", obj.cEq_file, "(t, X) \n"));
commentStr = strcat("%% Augmented equality path constraints wrapper function for phase ", ...
    string(i), ",\n%% automatically generated by the PhaseManager class on ", ...
    datestr(datetime("now")), "\n");
fprintf(id, commentStr);
% add line to increase corresponding feval count
fprintf(id, "%% Increase path constraints function evaluations \n");
fprintf(id, "global HOIST_fevalsCount_cEq \n");
fprintf(id, "HOIST_fevalsCount_cEq = HOIST_fevalsCount_cEq + 1; \n");
% set the wrapped inputs
fprintf(id, strcat("x = X(1: ", string(nx), ", 1); \n"));
fprintf(id, strcat("u = X(", string(nx + 1), ": ", ...
    string(nx + nu), ", 1); \n"));
fprintf(id, strcat("w = X(", string(nx + nu + 1), ": ", ...
    string(nX), ", 1); \n"));
% set the auxiliary functions and output
fprintf(id, "\n");
fprintf(id, strcat("cEq = ", obj.pathConstraintsEq_file, "(t, x, u, w); \n"));
fprintf(id, "end");
fclose(id);
end

