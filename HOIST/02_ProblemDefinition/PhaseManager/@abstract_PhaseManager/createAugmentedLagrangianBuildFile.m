function obj = createAugmentedLagrangianBuildFile(obj)
% function that creates the augmented lagrangian wrapper function

% get the phase number and the inputs dimensions
i = obj.ID(2);
[nx, ~, nw, nl, nxp, nwp] = getInputSizes(obj);
nI = nx + nw + nxp + nwp + nl;

% create the augmented lagrangian wrapper file
obj.phit_file = strcat("phit_", string(i));
id = fopen(strcat(obj.phit_file, ".m"), "w+");
fprintf(id, strcat("function phit = ", obj.phit_file, ...
    "(I, sigma) \n"));
commentStr = strcat("%% Augmented Lagrangian wrapper function for phase ", ...
    string(i), ",\n%% automatically generated by the PhaseManager class on ", ...
    datestr(datetime("now")), "\n");
fprintf(id, commentStr);
% add line to increase corresponding feval count
fprintf(id, "%% Increase augmented cost function evaluations \n");
fprintf(id, "global HOIST_fevalsCount_Jaug \n");
fprintf(id, "HOIST_fevalsCount_Jaug = HOIST_fevalsCount_Jaug + 1; \n");
% set the wrapped inputs
fprintf(id, strcat("xm = I(1: ", string(nx), ", 1); \n"));
fprintf(id, strcat("wm = I(", string(nx + 1), ": ", string(nx + nw), ...
    ", 1); \n"));
fprintf(id, strcat("xp = I(", string(nx + nw + 1), ": ", ...
    string(nx + nw + nxp), ", 1); \n"));
fprintf(id, strcat("wp = I(", string(nx + nw + nxp + 1), ": ", ...
    string(nx + nw + nxp + nwp), ", 1); \n"));
fprintf(id, strcat("lm = I(", string(nx + nw + nxp + nwp + 1), ": ", ...
    string(nI), ", 1); \n"));
fprintf(id, "\n");
% set the auxiliary functions and outputs
fprintf(id, strcat("phi = ", obj.terminalCostFile, "(xm, wm, xp, wp);\n"));
fprintf(id, strcat("Psi = ", obj.terminalConstraintFile, "(xm, wm, xp, wp);\n"));
fprintf(id, strcat("phit = phi + lm' * Psi + sigma * (Psi' * Psi);\n"));
fprintf(id, "end");
fclose(id);

end

