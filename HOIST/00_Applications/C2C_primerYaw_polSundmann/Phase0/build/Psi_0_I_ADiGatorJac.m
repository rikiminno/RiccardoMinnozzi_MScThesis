% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function Psi = Psi_0_I_ADiGatorJac(I)
global ADiGator_Psi_0_I_ADiGatorJac
if isempty(ADiGator_Psi_0_I_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_Psi_0_I_ADiGatorJac.Psi_0_I_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Constraints wrapper function for phase 0,
%User Line: % automatically generated by the PhaseManager_Psi class on 06-Dec-2024 12:50:01
xm.dI = I.dI(1);
xm.f = I.f(1,1);
%User Line: xm = I(1: 1, 1);
wm.dI = I.dI(2);
wm.f = I.f(2,1);
%User Line: wm = I(2: 2, 1);
xp.dI = I.dI(Gator1Data.Index2);
xp.f = I.f(Gator1Data.Index1,1);
%User Line: xp = I(3: 6, 1);
wp.dI = I.dI(7);
wp.f = I.f(7,1);
%User Line: wp = I(7: 7, 1);
lm.dI = I.dI(8);
lm.f = I.f(8,1);
%User Line: lm = I(8: 8, 1);
cadainput2_1.dI = xm.dI; cadainput2_1.f = xm.f;
%User Line: cadainput2_1 = xm;
cadainput2_2.dI = wm.dI; cadainput2_2.f = wm.f;
%User Line: cadainput2_2 = wm;
cadainput2_3.dI = xp.dI; cadainput2_3.f = xp.f;
%User Line: cadainput2_3 = xp;
cadainput2_4.dI = wp.dI; cadainput2_4.f = wp.f;
%User Line: cadainput2_4 = wp;
cadaoutput2_1 = ADiGator_terminal_constraint_01(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4);
% Call to function: terminal_constraint_0
Psi.f = cadaoutput2_1.f;
%User Line: Psi = cadaoutput2_1;
end
function Psi = ADiGator_terminal_constraint_01(xm,wm,xp,wp)
global ADiGator_Psi_0_I_ADiGatorJac
Gator1Data = ADiGator_Psi_0_I_ADiGatorJac.ADiGator_terminal_constraint_01.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that implements the terminal constraints for the dummy phase 0
%User Line: % object (this function should only be called in the definition of the
%User Line: % augmented Lagrangian partials)
Psi.f =  0;
%User Line: Psi = 0;
end


function ADiGator_LoadData()
global ADiGator_Psi_0_I_ADiGatorJac
ADiGator_Psi_0_I_ADiGatorJac = load('Psi_0_I_ADiGatorJac.mat');
return
end