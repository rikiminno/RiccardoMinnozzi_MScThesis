% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function cEq = cEq_1_X_ADiGatorJac(t,X)
global ADiGator_cEq_1_X_ADiGatorJac
if isempty(ADiGator_cEq_1_X_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_cEq_1_X_ADiGatorJac.cEq_1_X_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Augmented equality path constraints wrapper function for phase 1,
%User Line: % automatically generated by the PhaseManager class on 06-Dec-2024 12:49:23
%User Line: % Increase path constraints function evaluations
global HOIST_fevalsCount_cEq 
%User Line: global
HOIST_fevalsCount_cEq = HOIST_fevalsCount_cEq + 1;
%User Line: HOIST_fevalsCount_cEq = HOIST_fevalsCount_cEq + 1;
x.dX = X.dX(Gator1Data.Index2);
x.f = X.f(Gator1Data.Index1,1);
%User Line: x = X(1: 4, 1);
u.dX = X.dX(5);
u.f = X.f(5,1);
%User Line: u = X(5: 5, 1);
w.dX = X.dX(6);
w.f = X.f(6,1);
%User Line: w = X(6: 6, 1);
cadainput2_1 = t;
%User Line: cadainput2_1 = t;
cadainput2_2.dX = x.dX; cadainput2_2.f = x.f;
%User Line: cadainput2_2 = x;
cadainput2_3.dX = u.dX; cadainput2_3.f = u.f;
%User Line: cadainput2_3 = u;
cadainput2_4.dX = w.dX; cadainput2_4.f = w.f;
%User Line: cadainput2_4 = w;
cadaoutput2_1 = ADiGator_path_eq_constraints_11(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4);
% Call to function: path_eq_constraints_1
cEq.f = cadaoutput2_1.f;
%User Line: cEq = cadaoutput2_1;
end
function cEq = ADiGator_path_eq_constraints_11(t,x,u,w)
global ADiGator_cEq_1_X_ADiGatorJac
Gator1Data = ADiGator_cEq_1_X_ADiGatorJac.ADiGator_path_eq_constraints_11.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that defines the path equality constraints (in the form cEq = 0)
%User Line: % for the current phase
cEq.f =  0;
%User Line: cEq = 0;
end


function ADiGator_LoadData()
global ADiGator_cEq_1_X_ADiGatorJac
ADiGator_cEq_1_X_ADiGatorJac = load('cEq_1_X_ADiGatorJac.mat');
return
end