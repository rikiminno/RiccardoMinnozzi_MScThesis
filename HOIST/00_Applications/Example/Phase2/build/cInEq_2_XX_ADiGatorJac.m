% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function cInEq_X = cInEq_2_XX_ADiGatorJac(t,X)
global ADiGator_cInEq_2_XX_ADiGatorJac
if isempty(ADiGator_cInEq_2_XX_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_cInEq_2_XX_ADiGatorJac.cInEq_2_XX_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
gator_X.f.dX = X.dX; gator_X.f.f = X.f;
%User Line: gator_X.f = X;
gator_X.dX.f = Gator1Data.Data1;
%User Line: gator_X.dX = ones(15,1);
cadainput2_1 = t;
%User Line: cadainput2_1 = t;
cadainput2_2 = gator_X;
cadainput2_2.dX = gator_X.dX.f;
cadainput2_2.f = gator_X.f.f;
%User Line: cadainput2_2 = gator_X;
cadaoutput2_1 = cInEq_2_X_ADiGatorJac(cadainput2_1,cadainput2_2);
% Call to function: cInEq_2_X_ADiGatorJac
cInEq = cadaoutput2_1;
%User Line: cInEq = cadaoutput2_1;
cInEq.dX.f = Gator1Data.Data2;
%User Line: cInEq.dX = zeros(15,1);
cInEq_X.f =  zeros(1,15);
%User Line: cInEq_X = zeros(1,15);
end
function cInEq = cInEq_2_X_ADiGatorJac(t,X)
global ADiGator_cInEq_2_XX_ADiGatorJac
Gator1Data = ADiGator_cInEq_2_XX_ADiGatorJac.cInEq_2_X_ADiGatorJac.Gator1Data;
Gator2Data = ADiGator_cInEq_2_XX_ADiGatorJac.cInEq_2_X_ADiGatorJac.Gator2Data;
% ADiGator Start Derivative Computations
%User Line: % Augmented inequality path constraints wrapper function for phase 2,
%User Line: % automatically generated by the PhaseManager class on 03-Oct-2024 12:46:35
x.dX = X.dX(Gator1Data.Index2);
% Deriv 1 Line: x.dX = X.dX(Gator1Data.Index2);
x.f = X.f(Gator1Data.Index1,1);
% Deriv 1 Line: x.f = X.f(Gator1Data.Index1,1);
%User Line: x = X(1: 6, 1);
u.dX = X.dX(Gator1Data.Index4);
% Deriv 1 Line: u.dX = X.dX(Gator1Data.Index4);
u.f = X.f(Gator1Data.Index3,1);
% Deriv 1 Line: u.f = X.f(Gator1Data.Index3,1);
%User Line: u = X(7: 9, 1);
w.dX = X.dX(Gator1Data.Index6);
% Deriv 1 Line: w.dX = X.dX(Gator1Data.Index6);
w.f = X.f(Gator1Data.Index5,1);
% Deriv 1 Line: w.f = X.f(Gator1Data.Index5,1);
%User Line: w = X(10: 15, 1);
cadainput2_1 = t;
% Deriv 1 Line: cadainput2_1 = t;
%User Line: cadainput2_1 = t;
cadainput2_2.dX = x.dX;
% Deriv 1 Line: cadainput2_2.dX = x.dX;
cadainput2_2.f = x.f;
% Deriv 1 Line: cadainput2_2.f = x.f;
%User Line: cadainput2_2 = x;
cadainput2_3.dX = u.dX;
% Deriv 1 Line: cadainput2_3.dX = u.dX;
cadainput2_3.f = u.f;
% Deriv 1 Line: cadainput2_3.f = u.f;
%User Line: cadainput2_3 = u;
cadainput2_4.dX = w.dX;
% Deriv 1 Line: cadainput2_4.dX = w.dX;
cadainput2_4.f = w.f;
% Deriv 1 Line: cadainput2_4.f = w.f;
%User Line: cadainput2_4 = w;
cadainput3_1 = cadainput2_1;
% Deriv 1 Line: cadainput3_1 = cadainput2_1;
cadainput3_2 = cadainput2_2;
% Deriv 1 Line: cadainput3_2 = cadainput2_2;
cadainput3_3 = cadainput2_3;
% Deriv 1 Line: cadainput3_3 = cadainput2_3;
cadainput3_4 = cadainput2_4;
% Deriv 1 Line: cadainput3_4 = cadainput2_4;
cadaoutput3_1 = ADiGator_path_ineq_constraints_21(cadainput3_1,cadainput3_2,cadainput3_3,cadainput3_4);
% Call to function: ADiGator_path_ineq_constraints_21
cadaoutput2_1 = cadaoutput3_1;
% Deriv 1 Line: cadaoutput2_1 = cadaoutput3_1;
% Call to function: path_ineq_constraints_2
cInEq.f = cadaoutput2_1.f;
% Deriv 1 Line: cInEq.f = cadaoutput2_1.f;
%User Line: cInEq = cadaoutput2_1;
end
function cInEq = ADiGator_path_ineq_constraints_21(t,x,u,w)
global ADiGator_cInEq_2_XX_ADiGatorJac
Gator1Data = ADiGator_cInEq_2_XX_ADiGatorJac.ADiGator_path_ineq_constraints_21.Gator1Data;
Gator2Data = ADiGator_cInEq_2_XX_ADiGatorJac.ADiGator_path_ineq_constraints_21.Gator2Data;
% ADiGator Start Derivative Computations
%User Line: % function that defines the path inequality constraints (in the form
%User Line: % cEq >= 0) for the current phase
cInEq.f = 0;
% Deriv 1 Line: cInEq.f =  0;
%User Line: cInEq = 0;
end


function ADiGator_LoadData()
global ADiGator_cInEq_2_XX_ADiGatorJac
ADiGator_cInEq_2_XX_ADiGatorJac = load('cInEq_2_XX_ADiGatorJac.mat');
return
end