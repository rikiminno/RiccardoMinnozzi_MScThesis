% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function Psi_I = Psi_2_II_ADiGatorJac(I)
global ADiGator_Psi_2_II_ADiGatorJac
if isempty(ADiGator_Psi_2_II_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_Psi_2_II_ADiGatorJac.Psi_2_II_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
gator_I.f.dI = I.dI; gator_I.f.f = I.f;
%User Line: gator_I.f = I;
gator_I.dI.f = Gator1Data.Data1;
%User Line: gator_I.dI = ones(17,1);
cadainput2_1 = gator_I;
cadainput2_1.dI = gator_I.dI.f;
cadainput2_1.f = gator_I.f.f;
%User Line: cadainput2_1 = gator_I;
cadaoutput2_1 = Psi_2_I_ADiGatorJac(cadainput2_1);
% Call to function: Psi_2_I_ADiGatorJac
Psi = cadaoutput2_1;
%User Line: Psi = cadaoutput2_1;
Psi_I.f =  zeros(3,17);
%User Line: Psi_I = zeros(3,17);
cada1f1 = Psi.dI_location(:,2);
cada1f2 = cada1f1 - 1;
cada1f3 = cada1f2*3;
cada1f4 = Psi.dI_location(:,1);
cada1f5 = cada1f3 + cada1f4;
Psi_I.f(cada1f5) = Psi.dI;
%User Line: Psi_I((Psi.dI_location(:,2)-1)*3+Psi.dI_location(:,1)) = Psi.dI;
end
function Psi = Psi_2_I_ADiGatorJac(I)
global ADiGator_Psi_2_II_ADiGatorJac
Gator1Data = ADiGator_Psi_2_II_ADiGatorJac.Psi_2_I_ADiGatorJac.Gator1Data;
Gator2Data = ADiGator_Psi_2_II_ADiGatorJac.Psi_2_I_ADiGatorJac.Gator2Data;
% ADiGator Start Derivative Computations
%User Line: % Constraints wrapper function for phase 2,
%User Line: % automatically generated by the PhaseManager_Psi class on 03-Oct-2024 12:46:35
xm.dI = I.dI(Gator1Data.Index2);
% Deriv 1 Line: xm.dI = I.dI(Gator1Data.Index2);
xm.f = I.f(Gator1Data.Index1,1);
% Deriv 1 Line: xm.f = I.f(Gator1Data.Index1,1);
%User Line: xm = I(1: 6, 1);
wm.dI = I.dI(Gator1Data.Index4);
% Deriv 1 Line: wm.dI = I.dI(Gator1Data.Index4);
wm.f = I.f(Gator1Data.Index3,1);
% Deriv 1 Line: wm.f = I.f(Gator1Data.Index3,1);
%User Line: wm = I(7: 12, 1);
xp.dI = I.dI(13);
% Deriv 1 Line: xp.dI = I.dI(13);
xp.f = I.f(13,1);
% Deriv 1 Line: xp.f = I.f(13,1);
%User Line: xp = I(13: 13, 1);
wp.dI = I.dI(14);
% Deriv 1 Line: wp.dI = I.dI(14);
wp.f = I.f(14,1);
% Deriv 1 Line: wp.f = I.f(14,1);
%User Line: wp = I(14: 14, 1);
lm.dI = I.dI(Gator1Data.Index6);
% Deriv 1 Line: lm.dI = I.dI(Gator1Data.Index6);
lm.f = I.f(Gator1Data.Index5,1);
% Deriv 1 Line: lm.f = I.f(Gator1Data.Index5,1);
%User Line: lm = I(15: 17, 1);
cadainput2_1.dI = xm.dI;
% Deriv 1 Line: cadainput2_1.dI = xm.dI;
cadainput2_1.f = xm.f;
% Deriv 1 Line: cadainput2_1.f = xm.f;
%User Line: cadainput2_1 = xm;
cadainput2_2.dI = wm.dI;
% Deriv 1 Line: cadainput2_2.dI = wm.dI;
cadainput2_2.f = wm.f;
% Deriv 1 Line: cadainput2_2.f = wm.f;
%User Line: cadainput2_2 = wm;
cadainput2_3.dI = xp.dI;
% Deriv 1 Line: cadainput2_3.dI = xp.dI;
cadainput2_3.f = xp.f;
% Deriv 1 Line: cadainput2_3.f = xp.f;
%User Line: cadainput2_3 = xp;
cadainput2_4.dI = wp.dI;
% Deriv 1 Line: cadainput2_4.dI = wp.dI;
cadainput2_4.f = wp.f;
% Deriv 1 Line: cadainput2_4.f = wp.f;
%User Line: cadainput2_4 = wp;
cadainput3_1 = cadainput2_1;
% Deriv 1 Line: cadainput3_1 = cadainput2_1;
cadainput3_2 = cadainput2_2;
% Deriv 1 Line: cadainput3_2 = cadainput2_2;
cadainput3_3 = cadainput2_3;
% Deriv 1 Line: cadainput3_3 = cadainput2_3;
cadainput3_4 = cadainput2_4;
% Deriv 1 Line: cadainput3_4 = cadainput2_4;
cadaoutput3_1 = ADiGator_terminal_constraint_21(cadainput3_1,cadainput3_2,cadainput3_3,cadainput3_4);
% Call to function: ADiGator_terminal_constraint_21
cadaoutput2_1 = cadaoutput3_1;
% Deriv 1 Line: cadaoutput2_1 = cadaoutput3_1;
% Call to function: terminal_constraint_2
Psi.dI = cadaoutput2_1.dI;
% Deriv 1 Line: Psi.dI = cadaoutput2_1.dI;
Psi.f = cadaoutput2_1.f;
% Deriv 1 Line: Psi.f = cadaoutput2_1.f;
%User Line: Psi = cadaoutput2_1;
Psi.dI_size = [3 17];
% Deriv 1 Line: Psi.dI_size = [3,17];
Psi.dI_location = Gator1Data.Index7;
% Deriv 1 Line: Psi.dI_location = Gator1Data.Index7;
end
function Psi = ADiGator_terminal_constraint_21(xm,wm,xp,wp)
global ADiGator_Psi_2_II_ADiGatorJac
Gator1Data = ADiGator_Psi_2_II_ADiGatorJac.ADiGator_terminal_constraint_21.Gator1Data;
Gator2Data = ADiGator_Psi_2_II_ADiGatorJac.ADiGator_terminal_constraint_21.Gator2Data;
% ADiGator Start Derivative Computations
%User Line: % function that implements the terminal constraints for the current phase
target.f = [1;-1;0];
% Deriv 1 Line: target.f =  [1; -1; 0];
%User Line: target = [1; -1; 0];
cada1f1dI = xm.dI(Gator1Data.Index2);
% Deriv 1 Line: cada1f1dI = xm.dI(Gator1Data.Index2);
cada1f1 = xm.f(Gator1Data.Index1);
% Deriv 1 Line: cada1f1 = xm.f(Gator1Data.Index1);
Psi.dI = cada1f1dI;
% Deriv 1 Line: Psi.dI = cada1f1dI;
Psi.f = cada1f1 - target.f;
% Deriv 1 Line: Psi.f = cada1f1 - target.f;
%User Line: Psi = xm(1:3) - target;
end


function ADiGator_LoadData()
global ADiGator_Psi_2_II_ADiGatorJac
ADiGator_Psi_2_II_ADiGatorJac = load('Psi_2_II_ADiGatorJac.mat');
return
end