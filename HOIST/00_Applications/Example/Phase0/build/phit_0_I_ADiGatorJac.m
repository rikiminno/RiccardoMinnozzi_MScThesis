% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function phit = phit_0_I_ADiGatorJac(I,sigma)
global ADiGator_phit_0_I_ADiGatorJac
if isempty(ADiGator_phit_0_I_ADiGatorJac); ADiGator_LoadData(); end
Gator1Data = ADiGator_phit_0_I_ADiGatorJac.phit_0_I_ADiGatorJac.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Augmented Lagrangian wrapper function for phase 0,
%User Line: % automatically generated by the PhaseManager class on 03-Oct-2024 12:46:48
xm.dI = I.dI(1);
xm.f = I.f(1,1);
%User Line: xm = I(1: 1, 1);
wm.dI = I.dI(2);
wm.f = I.f(2,1);
%User Line: wm = I(2: 2, 1);
xp.dI = I.dI(Gator1Data.Index2);
xp.f = I.f(Gator1Data.Index1,1);
%User Line: xp = I(3: 8, 1);
wp.dI = I.dI(9);
wp.f = I.f(9,1);
%User Line: wp = I(9: 9, 1);
lm.dI = I.dI(10);
lm.f = I.f(10,1);
%User Line: lm = I(10: 10, 1);
cadainput3_1.dI = xm.dI; cadainput3_1.f = xm.f;
%User Line: cadainput3_1 = xm;
cadainput3_2.dI = wm.dI; cadainput3_2.f = wm.f;
%User Line: cadainput3_2 = wm;
cadainput3_3.dI = xp.dI; cadainput3_3.f = xp.f;
%User Line: cadainput3_3 = xp;
cadainput3_4.dI = wp.dI; cadainput3_4.f = wp.f;
%User Line: cadainput3_4 = wp;
cadaoutput3_1 = ADiGator_terminal_cost_01(cadainput3_1,cadainput3_2,cadainput3_3,cadainput3_4);
% Call to function: terminal_cost_0
phi.f = cadaoutput3_1.f;
%User Line: phi = cadaoutput3_1;
cadainput2_1.dI = xm.dI; cadainput2_1.f = xm.f;
%User Line: cadainput2_1 = xm;
cadainput2_2.dI = wm.dI; cadainput2_2.f = wm.f;
%User Line: cadainput2_2 = wm;
cadainput2_3.dI = xp.dI; cadainput2_3.f = xp.f;
%User Line: cadainput2_3 = xp;
cadainput2_4.dI = wp.dI; cadainput2_4.f = wp.f;
%User Line: cadainput2_4 = wp;
cadaoutput2_1 = ADiGator_terminal_constraint_01(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4);
% Call to function: terminal_constraint_0
Psi.f = cadaoutput2_1.f;
%User Line: Psi = cadaoutput2_1;
cada1f1dI = lm.dI;
cada1f1 = lm.f.';
cada1f2 = cada1f1*Psi.f;
cada1f3 = phi.f + cada1f2;
cada1f4 = Psi.f.';
cada1f5 = cada1f4*Psi.f;
cada1f6 = sigma*cada1f5;
phit.f = cada1f3 + cada1f6;
%User Line: phit = phi + lm' * Psi + sigma * (Psi' * Psi);
end
function Psi = ADiGator_terminal_constraint_01(xm,wm,xp,wp)
global ADiGator_phit_0_I_ADiGatorJac
Gator1Data = ADiGator_phit_0_I_ADiGatorJac.ADiGator_terminal_constraint_01.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % function that implements the terminal constraints for the dummy phase 0
%User Line: % object (this function should only be called in the definition of the
%User Line: % augmented Lagrangian partials)
Psi.f =  0;
%User Line: Psi = 0;
end
function phi = ADiGator_terminal_cost_01(xm,wm,xp,wp)
global ADiGator_phit_0_I_ADiGatorJac
Gator1Data = ADiGator_phit_0_I_ADiGatorJac.ADiGator_terminal_cost_01.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % terminal cost for the dummy phase 0 (this function should only be called
%User Line: % in the definition of the augmented Lagrangian function)
phi.f =  0;
%User Line: phi = 0;
end


function ADiGator_LoadData()
global ADiGator_phit_0_I_ADiGatorJac
ADiGator_phit_0_I_ADiGatorJac = load('phit_0_I_ADiGatorJac.mat');
return
end